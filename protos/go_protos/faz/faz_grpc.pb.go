// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package faz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FazServiceClient is the client API for FazService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FazServiceClient interface {
	Hook(ctx context.Context, in *HookRequest, opts ...grpc.CallOption) (*HookReply, error)
	Unhook(ctx context.Context, in *UnhookRequest, opts ...grpc.CallOption) (*UnhookReply, error)
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventReply, error)
}

type fazServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFazServiceClient(cc grpc.ClientConnInterface) FazServiceClient {
	return &fazServiceClient{cc}
}

func (c *fazServiceClient) Hook(ctx context.Context, in *HookRequest, opts ...grpc.CallOption) (*HookReply, error) {
	out := new(HookReply)
	err := c.cc.Invoke(ctx, "/faz.FazService/hook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fazServiceClient) Unhook(ctx context.Context, in *UnhookRequest, opts ...grpc.CallOption) (*UnhookReply, error) {
	out := new(UnhookReply)
	err := c.cc.Invoke(ctx, "/faz.FazService/unhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fazServiceClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventReply, error) {
	out := new(EventReply)
	err := c.cc.Invoke(ctx, "/faz.FazService/event", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FazServiceServer is the server API for FazService service.
// All implementations must embed UnimplementedFazServiceServer
// for forward compatibility
type FazServiceServer interface {
	Hook(context.Context, *HookRequest) (*HookReply, error)
	Unhook(context.Context, *UnhookRequest) (*UnhookReply, error)
	Event(context.Context, *EventRequest) (*EventReply, error)
	mustEmbedUnimplementedFazServiceServer()
}

// UnimplementedFazServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFazServiceServer struct {
}

func (UnimplementedFazServiceServer) Hook(context.Context, *HookRequest) (*HookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hook not implemented")
}
func (UnimplementedFazServiceServer) Unhook(context.Context, *UnhookRequest) (*UnhookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unhook not implemented")
}
func (UnimplementedFazServiceServer) Event(context.Context, *EventRequest) (*EventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedFazServiceServer) mustEmbedUnimplementedFazServiceServer() {}

// UnsafeFazServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FazServiceServer will
// result in compilation errors.
type UnsafeFazServiceServer interface {
	mustEmbedUnimplementedFazServiceServer()
}

func RegisterFazServiceServer(s grpc.ServiceRegistrar, srv FazServiceServer) {
	s.RegisterService(&FazService_ServiceDesc, srv)
}

func _FazService_Hook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FazServiceServer).Hook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faz.FazService/hook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FazServiceServer).Hook(ctx, req.(*HookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FazService_Unhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FazServiceServer).Unhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faz.FazService/unhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FazServiceServer).Unhook(ctx, req.(*UnhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FazService_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FazServiceServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faz.FazService/event",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FazServiceServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FazService_ServiceDesc is the grpc.ServiceDesc for FazService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FazService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "faz.FazService",
	HandlerType: (*FazServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "hook",
			Handler:    _FazService_Hook_Handler,
		},
		{
			MethodName: "unhook",
			Handler:    _FazService_Unhook_Handler,
		},
		{
			MethodName: "event",
			Handler:    _FazService_Event_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/faz.proto",
}
